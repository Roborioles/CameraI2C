// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Vision.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/FindTarget.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Vision::Vision() : Subsystem("Vision") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Vision::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new FindTarget());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Vision::PixyPrint(int t) {
	uint16_t signum = 0;
	uint16_t xPosition = 0;
	uint16_t yPosition = 0;
	uint16_t width = 0;
	uint16_t height = 0;

	uint8_t* pixyValues = new uint8_t[64];
	pixyValues[0] = (uint8_t) 0b01010101;
	pixyValues[1] = (uint8_t) 0b10101010;

	// Only check the camera once every 50 times this method is called
	if (t%50 == 0) {

		RobotMap::pixyi2c->ReadOnly(64,pixyValues);

		if (pixyValues != NULL) {

			// Print byte array (debugging)
			// for (int j=0;j<64;j++) {
			// 	printf("%2i %#x ",j,pixyValues[j]);
			// 	if ((j+1)%16 == 0) { printf("\n"); }
			// }

			int i = 0;

			// find first sync word
			while (!(((pixyValues[i] & 0xff) == 0x55) && ((pixyValues[i + 1] & 0xff) == 0xaa)) && i < 50) {
				i++;
			}
			i++;

			// check if the index is getting so high that you can’t align and see an entire frame.  Ensure it isn’t
			if (i > 50) { i = 49; }

			// find second sync word, which is the start of a frame
			while (!(((pixyValues[i] & 0xff) == 0x55) && ((pixyValues[i + 1] & 0xff) == 0xaa)) && i < 50) {
				i++;
			}

			signum = (uint16_t) (((pixyValues[i + 5] & 0xff) << 8) | (pixyValues[i + 4] & 0xff));
			xPosition = (uint16_t) (((pixyValues[i + 7] & 0xff) << 8) | (pixyValues[i + 6] & 0xff));
			yPosition = (uint16_t) (((pixyValues[i + 9] & 0xff) << 8) | (pixyValues[i + 8] & 0xff));
			width = (uint16_t) (((pixyValues[i + 11] & 0xff) << 8) | (pixyValues[i + 10] & 0xff));
			height = (uint16_t) (((pixyValues[i + 13] & 0xff) << 8) | (pixyValues[i + 12] & 0xff));

			// print results, including index within byte array, signature number, and coordinates
			printf("i: %i s: %i (%i,%i) w: %i,h: %i\n",i,signum,xPosition,yPosition,width,height);
		}
	}

}
